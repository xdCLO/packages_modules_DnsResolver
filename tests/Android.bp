cc_test_library {
    name: "libnetd_test_resolv_utils",
    defaults: ["netd_defaults"],
    srcs: [
        "resolv_test_utils.cpp",
    ],
    header_libs: [
        "libnetd_resolv_headers",
    ],
    shared_libs: [
        "libbase",
        "libutils",
    ],
    static_libs: [
        "libnetd_test_dnsresponder",
        "libnetdutils",
    ],
}

cc_library_static {
    name: "golddata_proto",
    defaults: ["netd_defaults"],
    proto: {
        export_proto_headers: true,
        type: "lite",
    },
    srcs: [
        "golddata.proto",
    ],
}

cc_test {
    name: "resolv_gold_test",
    test_suites: ["device-tests", "mts"],
    require_root: true,
    // b/151392634, this is a workaround because MTS
    // can not handle the test with testdata correctly.
    // TODO: Remove the xml after MTS fixing the problem.
    test_config: "resolv_gold_test_config.xml",
    defaults: ["netd_defaults"],
    data: ["testdata/pb/*.pb"],
    srcs: [
        "resolv_gold_test.cpp",
    ],
    header_libs: [
        "libnetd_client_headers",
    ],
    shared_libs: [
        "libcrypto",
        "libbinder_ndk",
        "liblog",
        "libssl",
    ],
    static_libs: [
        "dnsresolver_aidl_interface-unstable-ndk_platform",
        "golddata_proto",
        "libbase",
        "libgmock",
        "libnetd_resolv",
        "libnetd_test_dnsresponder_ndk",
        "libnetd_test_resolv_utils",
        "libnetdutils",
        "libprotobuf-cpp-lite",
        "netd_aidl_interface-ndk_platform",
        "netd_event_listener_interface-ndk_platform",
        "server_configurable_flags",
        "stats_proto",
    ],
    compile_multilib: "first",
}

cc_test {
    name: "resolv_stress_test",
    test_suites: ["device-tests", "mts"],
    // This won't work with test_config
    // require_root: true,
    test_config: "resolv_stress_test_config.xml",
    defaults: ["netd_defaults"],
    srcs: [
        "resolv_stress_test.cpp",
    ],
    header_libs: [
        "libnetd_resolv_headers",
    ],
    shared_libs: [
        "libbinder_ndk",
        "liblog",
        "libnetd_client",
    ],
    static_libs: [
        "dnsresolver_aidl_interface-ndk_platform",
        "libbase",
        "libgmock",
        "libnetd_test_dnsresponder_ndk",
        "libnetd_test_resolv_utils",
        "libnetdutils",
        "libutils",
        "netd_event_listener_interface-ndk_platform",
        "netd_aidl_interface-ndk_platform",
    ],
    compile_multilib: "first",
}

cc_test {
    name: "resolv_integration_test",
    test_suites: ["device-tests", "mts"],
    require_root: true,
    test_config: "resolv_integration_test_config.xml",
    defaults: ["netd_defaults"],
    tidy: false, // cuts test build time by > 1m30s
    srcs: [
        "dns_responder/dns_responder.cpp",
        "dnsresolver_binder_test.cpp",
        "resolv_integration_test.cpp",
    ],
    header_libs: [
        "libnetd_resolv_headers",
    ],
    // TODO: make static link libc++ work.
    //stl: "libc++_static",
    shared_libs: [
        "libbinder_ndk",
        "liblog",
        "libnetd_client",
    ],
    static_libs: [
        "dnsresolver_aidl_interface-unstable-ndk_platform",
        "libbase",
        "libbpf_android",
        "libcrypto_static",
        "libgmock",
        "libnetd_test_dnsresponder_ndk",
        "libnetd_test_metrics_listener",
        "libnetd_test_resolv_utils",
        "libnetd_test_tun_interface",
        "libnetd_test_utils",
        "libnetdutils",
        "libssl",
        "libutils",
        "netd_aidl_interface-ndk_platform",
        "netd_event_listener_interface-ndk_platform",
    ],
    compile_multilib: "both",
    multilib: {
        lib32: {
            suffix: "32",
        },
        lib64: {
            suffix: "64",
        },
    },
}

cc_test_library {
    name: "resolv_stats_test_utils",
    srcs: [
        "resolv_stats_test_utils.cpp"
    ],
    defaults: ["netd_defaults"],
    export_include_dirs: ["."],
    shared_libs: [
        "liblog",
    ],
    static_libs: [
        "libbase",
        "libgmock",
        "libnetdutils",
        "libprotobuf-cpp-lite",
        "stats_proto",
    ],
}

cc_test {
    name: "resolv_stats_test_utils_test",
    srcs: [
        "resolv_stats_test_utils_test.cpp",
    ],
    defaults: ["netd_defaults"],
    test_suites: ["device-tests"],
    shared_libs: [
        "liblog",
    ],
    static_libs: [
        "libbase",
        "libgmock",
        "libprotobuf-cpp-lite",
        "resolv_stats_test_utils",
        "stats_proto",
    ],
}
